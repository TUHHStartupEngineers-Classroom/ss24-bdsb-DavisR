{
  "hash": "b9f4701f9ec8d089462890c41f485706",
  "result": {
    "markdown": "---\ntitle: \"Data Acquisition\"\nauthor: \"Davis Rakhshan\"\n---\n\n\n# Challenge 1\n\nQuestion 1:\n\nGet some data via an API. There are millions of providers, that offer API access for free and have good documentation about how to query their service. You just have to google them. You can use whatever service you want. For example, you can get data about your listening history (spotify), get data about flights (skyscanner) or just check the weather forecast. Print the data in a readable format, e.g. a table if you want, you could also plot it.\n\nCode:\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-1_09286aae7be10e8083c4c038a94288b7'}\n\n```{.r .cell-code}\nlibrary(RSQLite)\nlibrary(httr)\nlibrary(glue)\nlibrary(jsonlite)\nlibrary(\"tidyverse\")\nlibrary(rvest)\n\n# Challenge 1\n\n# Latitude and longitude of TUHH\nlatitude <- \"53.46\"\nlongitude <- \"9.97\"\n  \nresp <- GET(glue(\"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&hourly=temperature_2m&timezone=Europe%2FBerlin\"))\n\nrespTable <- resp %>% \n            .$content %>% \n            rawToChar() %>% \n            fromJSON()\nrespTable\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $latitude\n#> [1] 53.46\n#> \n#> $longitude\n#> [1] 9.98\n#> \n#> $generationtime_ms\n#> [1] 0.04005432\n#> \n#> $utc_offset_seconds\n#> [1] 7200\n#> \n#> $timezone\n#> [1] \"Europe/Berlin\"\n#> \n#> $timezone_abbreviation\n#> [1] \"CEST\"\n#> \n#> $elevation\n#> [1] 23\n#> \n#> $hourly_units\n#> $hourly_units$time\n#> [1] \"iso8601\"\n#> \n#> $hourly_units$temperature_2m\n#> [1] \"°C\"\n#> \n#> \n#> $hourly\n#> $hourly$time\n#>   [1] \"2024-05-18T00:00\" \"2024-05-18T01:00\" \"2024-05-18T02:00\"\n#>   [4] \"2024-05-18T03:00\" \"2024-05-18T04:00\" \"2024-05-18T05:00\"\n#>   [7] \"2024-05-18T06:00\" \"2024-05-18T07:00\" \"2024-05-18T08:00\"\n#>  [10] \"2024-05-18T09:00\" \"2024-05-18T10:00\" \"2024-05-18T11:00\"\n#>  [13] \"2024-05-18T12:00\" \"2024-05-18T13:00\" \"2024-05-18T14:00\"\n#>  [16] \"2024-05-18T15:00\" \"2024-05-18T16:00\" \"2024-05-18T17:00\"\n#>  [19] \"2024-05-18T18:00\" \"2024-05-18T19:00\" \"2024-05-18T20:00\"\n#>  [22] \"2024-05-18T21:00\" \"2024-05-18T22:00\" \"2024-05-18T23:00\"\n#>  [25] \"2024-05-19T00:00\" \"2024-05-19T01:00\" \"2024-05-19T02:00\"\n#>  [28] \"2024-05-19T03:00\" \"2024-05-19T04:00\" \"2024-05-19T05:00\"\n#>  [31] \"2024-05-19T06:00\" \"2024-05-19T07:00\" \"2024-05-19T08:00\"\n#>  [34] \"2024-05-19T09:00\" \"2024-05-19T10:00\" \"2024-05-19T11:00\"\n#>  [37] \"2024-05-19T12:00\" \"2024-05-19T13:00\" \"2024-05-19T14:00\"\n#>  [40] \"2024-05-19T15:00\" \"2024-05-19T16:00\" \"2024-05-19T17:00\"\n#>  [43] \"2024-05-19T18:00\" \"2024-05-19T19:00\" \"2024-05-19T20:00\"\n#>  [46] \"2024-05-19T21:00\" \"2024-05-19T22:00\" \"2024-05-19T23:00\"\n#>  [49] \"2024-05-20T00:00\" \"2024-05-20T01:00\" \"2024-05-20T02:00\"\n#>  [52] \"2024-05-20T03:00\" \"2024-05-20T04:00\" \"2024-05-20T05:00\"\n#>  [55] \"2024-05-20T06:00\" \"2024-05-20T07:00\" \"2024-05-20T08:00\"\n#>  [58] \"2024-05-20T09:00\" \"2024-05-20T10:00\" \"2024-05-20T11:00\"\n#>  [61] \"2024-05-20T12:00\" \"2024-05-20T13:00\" \"2024-05-20T14:00\"\n#>  [64] \"2024-05-20T15:00\" \"2024-05-20T16:00\" \"2024-05-20T17:00\"\n#>  [67] \"2024-05-20T18:00\" \"2024-05-20T19:00\" \"2024-05-20T20:00\"\n#>  [70] \"2024-05-20T21:00\" \"2024-05-20T22:00\" \"2024-05-20T23:00\"\n#>  [73] \"2024-05-21T00:00\" \"2024-05-21T01:00\" \"2024-05-21T02:00\"\n#>  [76] \"2024-05-21T03:00\" \"2024-05-21T04:00\" \"2024-05-21T05:00\"\n#>  [79] \"2024-05-21T06:00\" \"2024-05-21T07:00\" \"2024-05-21T08:00\"\n#>  [82] \"2024-05-21T09:00\" \"2024-05-21T10:00\" \"2024-05-21T11:00\"\n#>  [85] \"2024-05-21T12:00\" \"2024-05-21T13:00\" \"2024-05-21T14:00\"\n#>  [88] \"2024-05-21T15:00\" \"2024-05-21T16:00\" \"2024-05-21T17:00\"\n#>  [91] \"2024-05-21T18:00\" \"2024-05-21T19:00\" \"2024-05-21T20:00\"\n#>  [94] \"2024-05-21T21:00\" \"2024-05-21T22:00\" \"2024-05-21T23:00\"\n#>  [97] \"2024-05-22T00:00\" \"2024-05-22T01:00\" \"2024-05-22T02:00\"\n#> [100] \"2024-05-22T03:00\" \"2024-05-22T04:00\" \"2024-05-22T05:00\"\n#> [103] \"2024-05-22T06:00\" \"2024-05-22T07:00\" \"2024-05-22T08:00\"\n#> [106] \"2024-05-22T09:00\" \"2024-05-22T10:00\" \"2024-05-22T11:00\"\n#> [109] \"2024-05-22T12:00\" \"2024-05-22T13:00\" \"2024-05-22T14:00\"\n#> [112] \"2024-05-22T15:00\" \"2024-05-22T16:00\" \"2024-05-22T17:00\"\n#> [115] \"2024-05-22T18:00\" \"2024-05-22T19:00\" \"2024-05-22T20:00\"\n#> [118] \"2024-05-22T21:00\" \"2024-05-22T22:00\" \"2024-05-22T23:00\"\n#> [121] \"2024-05-23T00:00\" \"2024-05-23T01:00\" \"2024-05-23T02:00\"\n#> [124] \"2024-05-23T03:00\" \"2024-05-23T04:00\" \"2024-05-23T05:00\"\n#> [127] \"2024-05-23T06:00\" \"2024-05-23T07:00\" \"2024-05-23T08:00\"\n#> [130] \"2024-05-23T09:00\" \"2024-05-23T10:00\" \"2024-05-23T11:00\"\n#> [133] \"2024-05-23T12:00\" \"2024-05-23T13:00\" \"2024-05-23T14:00\"\n#> [136] \"2024-05-23T15:00\" \"2024-05-23T16:00\" \"2024-05-23T17:00\"\n#> [139] \"2024-05-23T18:00\" \"2024-05-23T19:00\" \"2024-05-23T20:00\"\n#> [142] \"2024-05-23T21:00\" \"2024-05-23T22:00\" \"2024-05-23T23:00\"\n#> [145] \"2024-05-24T00:00\" \"2024-05-24T01:00\" \"2024-05-24T02:00\"\n#> [148] \"2024-05-24T03:00\" \"2024-05-24T04:00\" \"2024-05-24T05:00\"\n#> [151] \"2024-05-24T06:00\" \"2024-05-24T07:00\" \"2024-05-24T08:00\"\n#> [154] \"2024-05-24T09:00\" \"2024-05-24T10:00\" \"2024-05-24T11:00\"\n#> [157] \"2024-05-24T12:00\" \"2024-05-24T13:00\" \"2024-05-24T14:00\"\n#> [160] \"2024-05-24T15:00\" \"2024-05-24T16:00\" \"2024-05-24T17:00\"\n#> [163] \"2024-05-24T18:00\" \"2024-05-24T19:00\" \"2024-05-24T20:00\"\n#> [166] \"2024-05-24T21:00\" \"2024-05-24T22:00\" \"2024-05-24T23:00\"\n#> \n#> $hourly$temperature_2m\n#>   [1] 16.4 15.5 14.4 13.6 12.8 12.1 11.9 12.8 14.7 17.0 19.2 20.7 20.7 20.8 21.3\n#>  [16] 20.9 22.0 21.9 21.9 18.9 17.9 17.2 16.0 15.1 14.5 14.0 13.4 13.0 12.6 12.2\n#>  [31] 12.0 12.4 13.3 14.5 16.4 18.6 19.8 20.2 20.5 20.7 20.9 21.0 19.3 19.6 18.8\n#>  [46] 17.7 16.6 15.5 14.5 13.7 13.2 12.7 12.4 12.3 12.2 12.9 14.1 15.2 17.6 19.1\n#>  [61] 18.5 18.9 19.9 20.6 20.5 20.1 19.8 18.2 17.6 16.8 15.9 15.4 15.1 14.8 14.6\n#>  [76] 14.6 14.6 14.6 14.6 14.8 15.9 17.1 18.6 19.7 20.9 22.0 22.9 23.6 24.1 24.0\n#>  [91] 23.1 21.7 20.4 19.3 18.3 17.4 16.7 16.1 15.7 15.2 14.8 14.8 15.4 16.4 17.5\n#> [106] 19.0 20.6 21.9 22.9 23.6 23.8 23.1 21.8 20.7 20.2 19.8 19.4 18.8 18.3 17.8\n#> [121] 17.5 17.2 16.8 16.0 15.0 14.5 14.8 15.6 16.2 16.1 16.2 16.3 16.5 16.6 16.6\n#> [136] 16.5 16.3 16.1 15.8 15.4 15.2 15.1 15.1 15.0 14.8 14.5 14.2 13.9 13.6 13.4\n#> [151] 13.2 13.2 13.4 14.0 15.0 16.0 17.0 18.1 19.1 19.8 20.3 20.5 20.3 19.9 19.3\n#> [166] 18.5 17.6 16.6\n```\n:::\n\n```{.r .cell-code}\n# Extract relevant data from the response\nforecast_data <- respTable$hourly\n\n# Create a tibble\nweather_tbl <- tibble(\n  time = forecast_data$time,\n  temperature_2m = forecast_data$temperature_2m\n)\n\n# Print the tibble\nprint(weather_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 168 × 2\n#>    time             temperature_2m\n#>    <chr>                     <dbl>\n#>  1 2024-05-18T00:00           16.4\n#>  2 2024-05-18T01:00           15.5\n#>  3 2024-05-18T02:00           14.4\n#>  4 2024-05-18T03:00           13.6\n#>  5 2024-05-18T04:00           12.8\n#>  6 2024-05-18T05:00           12.1\n#>  7 2024-05-18T06:00           11.9\n#>  8 2024-05-18T07:00           12.8\n#>  9 2024-05-18T08:00           14.7\n#> 10 2024-05-18T09:00           17  \n#> # ℹ 158 more rows\n```\n:::\n\n```{.r .cell-code}\n# Convert time to datetime format\nweather_tbl$time <- as.POSIXct(weather_tbl$time, format = \"%Y-%m-%dT%H:%M\")\n\n# Ensure data is sorted by time\nweather_tbl <- weather_tbl %>% arrange(time)\n\n\n# Extract day part of the date\nweather_tbl$day <- factor(format(weather_tbl$time, \"%d\"), levels = unique(format(weather_tbl$time, \"%d\")))\nweather_tbl <- na.omit(weather_tbl)\n\n\n# Create a plot\np <- ggplot(weather_tbl, aes(x = time, y = temperature_2m)) +\n  geom_point(position = \"identity\") +  # Set position to \"identity\" to remove space between points\n  geom_line(color = \"blue\", show.legend = FALSE) +\n  labs(title = \"Hourly Temperature for 7 Days\",\n       subtitle = \"Ordered by date and time\",\n       x = \"Time\",\n       y = \"Temperature (°C)\") +\n  theme_minimal() +\n  facet_wrap(~ factor(format(weather_tbl$time, \"%A\"), levels = unique(format(weather_tbl$time, \"%A\"))), nrow = 1, scales = \"free_x\")\n\n# Adjust x-axis labels to show only time with \":00\"\np <- p + scale_x_datetime(date_breaks = \"6 hours\", date_labels = \"%H:%M:00\") # Adjust date_labels\n\n# Remove space between plots\np <- p + theme(strip.text = element_text(size = 8, face = \"bold\"), \n               panel.spacing = unit(0, \"lines\"),\n               axis.text.x = element_text(angle = 45, hjust = 1, size = 8), # Adjust angle and size\n               legend.title = element_blank())\n\n# Print the plot\nprint(p)\n```\n\n::: {.cell-output-display}\n![](02_data_acquisition_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n# Challenge 2\n\nQuestion 2:\n\nScrape one of the competitor websites of canyon (either https://www.rosebikes.de/ or https://www.radon-bikes.de) and create a small database. The database should contain the model names and prices for at least one category. Use the selectorgadget to get a good understanding of the website structure, it is really helpful. After scraping your data, convert it to a readable format. Prices should be in a numeric format without any other letters or symbols. Also check if the prices are reasonable.\n\nCode:\n\n\n::: {.cell hash='02_data_acquisition_cache/html/unnamed-chunk-2_142152f5a4022d128b75a89fc0297dfd'}\n\n```{.r .cell-code}\n# Challenge 2\n\n# Define the URL of the website\nurl_race <- \"https://www.rosebikes.de/fahrr%C3%A4der/rennrad/race\"\nurl_endurance <- \"https://www.rosebikes.de/fahrr%C3%A4der/rennrad/endurance\"\nurl_eBike <- \"https://www.rosebikes.de/fahrr%C3%A4der/rennrad/e-rennrad\"\n\n# Read the HTML content of the webpage\nwebpage_race <- url_race %>% read_html()\nwebpage_endurance <- url_endurance %>% read_html()\nwebpage_eBike <- url_eBike %>% read_html()\n\n# Extract the content within the h4 tag with class \"basic-headline__title\"\ntitle_race        <- html_text(html_nodes(webpage_race, \"h4.basic-headline__title\"))\ntitle_endurance   <- html_text(html_nodes(webpage_endurance, \"h4.basic-headline__title\"))\ntitle_eBike       <- html_text(html_nodes(webpage_eBike, \"h4.basic-headline__title\"))\n\n# Extract the content within the specified class \"catalog-category-bikes__price-title\"\nprice_title_race      <- html_text(html_nodes(webpage_race, \".catalog-category-bikes__price-title\"))\nprice_title_endurance <- html_text(html_nodes(webpage_endurance, \".catalog-category-bikes__price-title\"))\nprice_title_eBike<- html_text(html_nodes(webpage_eBike, \".catalog-category-bikes__price-title\"))\n\n# Remove \"ab \" and \"\\n\" from the price\nprice_title_race <- gsub(\"ab |\\\\n\", \"\", price_title_race)\nprice_title_endurance <- gsub(\"ab |\\\\n\", \"\", price_title_endurance)\nprice_title_eBike<- gsub(\"ab |\\\\n\", \"\", price_title_eBike)\n\n# Remove trailing whitespaces\nprice_title_race <- trimws(price_title_race)\nprice_title_endurance <- trimws(price_title_endurance)\nprice_title_eBike<- trimws(price_title_eBike)\n\n\n# Create a tibble with the extracted content\nbike_data_race <- tibble(model = title_race, price = price_title_race)\nbike_data_endurance <- tibble(model = title_endurance, price = price_title_endurance)\nbike_data_eBike<- tibble(model = title_eBike, price = price_title_eBike)\n\n\n# Print the tibble\nprint(bike_data_race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 2\n#>   model                      price     \n#>   <chr>                      <chr>     \n#> 1 XLITE UNLTD                8.999,00 €\n#> 2 XLITE UNLTD KITTEL EDITION 8.999,00 €\n#> 3 XLITE                      3.599,00 €\n#> 4 XLITE 06 Rahmenset         2.999,00 €\n```\n:::\n\n```{.r .cell-code}\nprint(bike_data_endurance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 4 × 2\n#>   model     price     \n#>   <chr>     <chr>     \n#> 1 BLEND     1.199,00 €\n#> 2 REVEAL AL 1.849,00 €\n#> 3 PRO SL    1.099,00 €\n#> 4 REVEAL    3.299,00 €\n```\n:::\n\n```{.r .cell-code}\nprint(bike_data_eBike)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 2\n#>   model       price     \n#>   <chr>       <chr>     \n#> 1 REVEAL PLUS 3.699,00 €\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "2a9e4f88c06497e8c2b4dfe9d54b87d5",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization\"\nauthor: \"Davis Rakhshan\"\n---\n\n\n# Challenge 1\n\nQuestion 1:\n\nMap the time course of the cumulative Covid-19 cases!\n\nCode:\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-1_2ffae87610816f438cf9468cb89c740f'}\n\n```{.r .cell-code}\n# Challenge 1\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(lubridate)\nlibrary(ggrepel) \n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 399276 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Filter data for the specified countries and date range\nselected_countries <- c(\"Germany\", \"United Kingdom\", \"United States\", \"France\", \"Spain\")\n\nfiltered_data <- covid_data_tbl %>%\n  filter(location %in% selected_countries,\n         date >= \"2020-01-01\" & date <= \"2022-04-20\")\n\neurope_data <- covid_data_tbl %>%\n  filter(continent == \"Europe\",\n         date >= \"2020-01-01\" & date <= \"2022-04-20\") %>%\n  group_by(date) %>%\n  summarise(total_cases = ifelse(sum(total_cases, na.rm = TRUE) == 0, NA, sum(total_cases, na.rm = TRUE)))\n\n\n# Combine the Europe data with the original data\ncombined_data <- bind_rows(filtered_data, europe_data %>% mutate(location = \"Europe\"))\n\n# Define custom colors for the lines\ncustom_colors <- c(\"red2\", \"skyblue2\", \"coral\", \"orange3\", \"yellow4\", 'deeppink4')  # You can add more colors as needed\n\n# Extract the last data points for Europe and United States\nlast_values <- combined_data %>%\n  filter(location %in% c(\"Europe\", \"United States\")) %>%\n  group_by(location) %>%\n  slice(n())  # Extract the last row for each location\n\n\n# Plot cumulative Covid-19 cases over time\nggplot(combined_data, aes(x = date, y = total_cases, color = location)) +\n  geom_line(size = 1.5, alpha = 0) +  # Increase size and reduce transparency\n  geom_smooth(method = \"loess\", se = FALSE, size = 1, alpha = 0.2, span = 0.2) +  # Adjust span for reduced smoothing\n  geom_label(data = last_values, aes(label = last_values$total_cases, color = location), \n             label.padding = unit(0.2, \"lines\"), \n             size = 3, \n             show.legend = FALSE,\n             label=format(last_values$total_cases, big.mark = \".\", scientific = FALSE)) + # Apply formatting to total_cases label\n  labs(title = \"Cumulative Covid-19 Cases Over Time\",\n       x = \"Date\",\n       y = \"Cumulative Cases\",\n       color = \"Country\") +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%b %Y\") + # Set breaks and labels to every month\n  scale_y_continuous(labels = function(x) ifelse(x >= 1e6, paste0(x/1e6, \"M\"), x),\n                     limits = c(0, 200e6)) +\n  theme_linedraw() +\n  scale_color_manual(values = custom_colors) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), title = element_text(face = \"bold\", color = \"#0b1562\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in prettyNum(.Internal(format(x, trim, digits, nsmall, width, 3L, :\n#> 'big.mark' und 'decimal.mark' sind beide '.', was verwirrend sein könnte\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 84 rows containing non-finite outside the scale range\n#> (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 84 rows containing missing values or values outside the scale range\n#> (`geom_line()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 26 rows containing missing values or values outside the scale range\n#> (`geom_smooth()`).\n```\n:::\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n# Challenge 2\n\nQuestion 2:\n\nVisualize the distribution of the mortality rate (deaths / population) with geom_map() (alternatively, you can plot the case-fatality rate (deaths / cases)).\n\nCode:\n\n\n::: {.cell hash='04_data_visualization_cache/html/unnamed-chunk-2_2b36f2d938f1c35e55a95d7ced411ead'}\n\n```{.r .cell-code}\n# Load map data\nworld <- map_data(\"world\")\n\n# Read COVID-19 data\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 399276 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Filter data for the specified date range\nfiltered_data <- covid_data_tbl %>%\n  filter(date == \"2024-04-28\")\n\n# Adjust country names\nfiltered_data <- filtered_data %>%\n  mutate(location = case_when(\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    TRUE ~ location\n  )) %>%\n  distinct()\n\n\n# Calculate mortality rate\nfiltered_data <- filtered_data %>%\n  mutate(mortality_rate = ifelse(population == 0, NA, total_deaths / population))\n\n# Merge COVID-19 data with map data\nmerged_data <- left_join(world, filtered_data, by = c(\"region\" = \"location\"))\n\n\n# Plot distribution of mortality rate\nggplot() +\n  geom_map(data = merged_data, map = world, aes(map_id = region, fill = mortality_rate)) +\n  expand_limits(x = world$long, y = world$lat) +\n  scale_fill_gradient(name = \"Mortality Rate\", \n                      low = \"#ff1d1d\", \n                      high = \"#460000\", \n                      na.value = \"grey\", \n                      breaks = seq(0, 0.006, by = 0.002),  # Set breaks from 0 to 0.006 in steps of 0.001\n                      labels = paste0(seq(0.00, 0.60, by = 0.20), \"%\")) +  # Set labels from 0% to 60%\n  labs(title = \"Confirmed COVID-19 deaths relative to size of the population\",\n       fill = \"Mortality Rate\",\n       map_id = \"Country\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](04_data_visualization_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}